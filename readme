# User Management API

This is a User Management API built using Node.js and MongoDB, providing functionalities for user registration, login, logout, and more. The API is designed to handle user authentication and account management.

##Table of Contents

- [Installation](#installation)
- [Environment Variables](#environment-variables)
- [API Endpoints](#api-endpoints)
- [Usage](#usage)
- [Running the Server](#running-the-server)
- [Contributing](#contributing)

##Installation

1. Clone the repository:
   ```bash
   git clone <repository-url>
   cd <repository-directory>
   ```

2. Install the dependencies:
   ```bash
   npm install
   ```

## Environment Variables

Make sure to create a `.env` file in the root directory of your project and add the following variables:

```plaintext
MONGO_URI=mongodb+srv://<username>:<password>@cluster0.ome2p.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0

PORT=3000
CORS_ORIGIN=*
ACCESS_TOKEN_SECRET=<your-access-token-secret>
ACCESS_TOKEN_EXPIRES_IN=1d
REFRESH_TOKEN_SECRET=<your-refresh-token-secret>
REFRESH_TOKEN_EXPIRES_IN=7d

CLOUDINARY_NAME=<your-cloudinary-name>
CLOUDINARY_API_KEY=<your-cloudinary-api-key>
CLOUDINARY_API_SECRET=<your-cloudinary-api-secret>
```

Replace `<username>`, `<password>`, and other placeholders with your actual credentials.

## API Endpoints

| Method | Endpoint                               | Description                       |
|--------|----------------------------------------|-----------------------------------|
| POST   | `/api/v1/user/register`               | Register a new user               |
| POST   | `/api/v1/user/login`                  | Log in an existing user           |
| POST   | `/api/v1/user/logout`                 | Log out the current user          |
| POST   | `/api/v1/user/refresh-token`          | Refresh user access token         |
| PATCH  | `/api/v1/user/change-password`        | Change user password              |
| GET    | `/api/v1/user/current-user`           | Get the current logged-in user    |
| PATCH  | `/api/v1/user/update-account`         | Update user account information    |
| PATCH  | `/api/v1/user/avatar`                 | Update user avatar                |
| PATCH  | `/api/v1/user/cover-image`            | Update user cover image           |
| GET    | `/api/v1/user/c/:username`            | Get user by username              |
| GET    | `/api/v1/user/history`                | Get user watch history            |

## Usage

### Register User
```http
POST /api/v1/user/register
Content-Type: application/json

{
    "username": "user@example.com",
    "email": "user@example.com",
    "password": "yourpassword"
}
```

### Log In User
```http
POST /api/v1/user/login
Content-Type: application/json

{
    "email": "kumari@testing.com",
    "password": "apitesti"
}
```

### Log Out User
```http
POST /api/v1/user/logout
```

### Response Example
```json
{
    "statusCode": 200,
    "success": true,
    "message": "User logged out successfully",
    "data": {}
}
```

## Running the Server

To start the server, run:

```bash
node index.js
```

The server will run on `http://localhost:3000`.

## Contributing

Contributions are welcome! Please feel free to submit a pull request or open an issue.

## License

This project is licensed under the MIT License.
